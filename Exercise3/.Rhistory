sepcolor="white",
sepwidth=c(0.05,0.05),
cexRow=0.5,
cexCol=0.9,
key=TRUE,
keysize=1.5,
density.info="histogram",
ColSideColors = c(rep("red",10),rep("blue",10), rep("green",10), rep("yellow",10)),
tracecol=NULL,
srtCol=30)
topTab.heatmap1
rownames(topTab.heatmap1) <- topTab.heatmap1[,1]
topTab.heatmap1_subset <- topTab.heatmap1[,c(5:24)]
HMdata <- merge(my_frame, topTab.heatmap1_subset, by.x = 0, by.y = 0)
rownames(HMdata) <- HMdata$Row.names
HMdata <- HMdata[, -c(1)]
head(HMdata)
HMdata2 <- data.matrix(HMdata, rownames.force=TRUE)
head(HMdata2)
heatmap.2(HMdata2,
Rowv=TRUE,
Colv=TRUE,
main="HeatMap_CDvsHF_RES FC>=3",
scale="row",
col=my_palette,
sepcolor="white",
sepwidth=c(0.05,0.05),
cexRow=0.5,
cexCol=0.9,
key=TRUE,
keysize=1.5,
density.info="histogram",
ColSideColors = c(rep("red",10),rep("blue",10), rep("green",10), rep("yellow",10)),
tracecol=NULL,
srtCol=30)
dev.off()
#EXPORT TO PDF FILE
pdf(file.path(resultsDir,"HeatMap_CDvsHF_RES.pdf"))
heatmap.2(HMdata,
Rowv=TRUE,
Colv=TRUE,
main="HeatMap_CDvsHF_RES FC>=3",
scale="row",
col=my_palette,
sepcolor="white",
sepwidth=c(0.05,0.05),
cexRow=0.5,
cexCol=0.9,
key=TRUE,
keysize=1.5,
density.info="histogram",
ColSideColors = c(rep("red",5),rep("blue",5), rep("green",5), rep("yellow",5)),
tracecol=NULL,
srtCol=30)
View(HMdata)
HMdata2 <- data.matrix(HMdata, rownames.force=TRUE)
head(HMdata2)
HMdata <- HMdata[, -c(1, 2:20)]
head(HMdata)
View(HMdata)
HMdata2 <- data.matrix(HMdata, rownames.force=TRUE)
head(HMdata2)
write.csv2(HMdata2, file = file.path(resultsDir,"Data2HM.csv"))
traceback()
#HEATMAP PLOT
my_palette <- colorRampPalette(c("blue", "red","green"))(n = 299)
#EXPORT TO PDF FILE
pdf(file.path(resultsDir,"HeatMap_CDvsHF_RES.pdf"))
heatmap.2(HMdata,
Rowv=TRUE,
Colv=TRUE,
main="HeatMap_CDvsHF_RES FC>=3",
scale="row",
col=my_palette,
sepcolor="white",
sepwidth=c(0.05,0.05),
cexRow=0.5,
cexCol=0.9,
key=TRUE,
keysize=1.5,
density.info="histogram",
ColSideColors=c("red", "blue", "red", "blue",
"green", "green", "blue", "blue",
"red", "red", "red", "red","blue",
"blue", "red", "green", "green",
"red","red","red"),
tracecol=NULL,
srtCol=30)
heatmap.2(HMdata,
Rowv=TRUE,
Colv=TRUE,
main="HeatMap_CDvsHF_RES FC>=3",
scale="row",
col=my_palette,
sepcolor="white",
sepwidth=c(0.05,0.05),
cexRow=0.5,
cexCol=0.9,
key=TRUE,
keysize=1.5,
density.info="histogram",
ColSideColors=c("red", "blue", "red", "blue",
"green", "green", "blue", "blue",
"red", "red", "red", "red","blue",
"blue", "red", "green", "green",
"red","red","red"),
tracecol=NULL,
srtCol=30)
heatmap.2(HMdata,
Rowv=TRUE,
Colv=TRUE,
main="HeatMap_CDvsHF_RES FC>=3",
scale="row",
col=my_palette,
sepcolor="white",
sepwidth=c(0.05,0.05),
cexRow=0.5,
cexCol=0.9,
key=TRUE,
keysize=1.5,
density.info="histogram",
ColSideColors=c("red", "blue", "red", "blue",
"green", "green", "blue", "blue",
"red", "red", "red", "red","blue",
"blue", "red", "green", "green",
"red","red","red"),
tracecol=NULL,
srtCol=30)
#EXPORT TO PDF FILE
pdf(file.path(resultsDir,"HeatMap_CDvsHF_RES.pdf"))
heatmap.2(HMdata2,
Rowv=TRUE,
Colv=TRUE,
main="HeatMap_CDvsHF_RES FC>=3",
scale="row",
col=my_palette,
sepcolor="white",
sepwidth=c(0.05,0.05),
cexRow=0.5,
cexCol=0.9,
key=TRUE,
keysize=1.5,
density.info="histogram",
ColSideColors=c("red", "blue", "red", "blue",
"green", "green", "blue", "blue",
"red", "red", "red", "red","blue",
"blue", "red", "green", "green",
"red","red","red"),
tracecol=NULL,
srtCol=30)
dev.off()
HMdata_2 <- merge(my_frame, topTab.heatmap2_subset, by.x = 0, by.y = 0)
topTab.heatmap2 <- topTab.end2
rownames(topTab.heatmap2) <- topTab.heatmap2[,1]
topTab.heatmap2_subset <- topTab.heatmap2[,c(5:24)]
#PREPARE THE DATA
my_frame <- data.frame(exprs(eset_rma))
head(my_frame)
HMdata_2 <- merge(my_frame, topTab.heatmap2_subset, by.x = 0, by.y = 0)
rownames(HMdata_2) <- HMdata_2$Row.names
HMdata_2 <- HMdata_2[, -c(1, 2:20)]
head(HMdata_2)
HMdata_2 <- merge(my_frame, topTab.heatmap2_subset, by.x = 0, by.y = 0)
View(HMdata_2)
HMdata_2
topTab.end2
topTab.heatmap2 <- topTab.end2
rownames(topTab.heatmap2) <- topTab.heatmap2[,1]
topTab.heatmap2_subset <- topTab.heatmap2[,c(5:24)]
topTab.heatmap2_subset
HMdata_2 <- merge(my_frame, topTab.heatmap2_subset, by.x = 0, by.y = 0)
rownames(HMdata_2) <- HMdata_2$Row.names
HMdata_2 <- HMdata_2[, -c(1, 2:20)]
HMdata_2
head(my_frame)
HMdata_2 <- merge(my_frame, topTab.heatmap2_subset, by.x = 0, by.y = 0)
rownames(HMdata_2) <- HMdata_2$Row.names
View(HMdata_2)
topTab.heatmap2_subset
View(topTab.heatmap2_subset)
View(topTab.heatmap1)
View(topTab.heatmap1_subset)
View(topTab.heatmap2)
## Comparison 2
anotaGenes.end2 <- merge(anotaGenes, topTab_HFvsHF_RES, by.x=0,by.y=0)
#reordenamos las columnas
topTab.end2 <- anotaGenes.end2
topTab.end2 <- topTab.end2[order(-topTab.end2$B),]
topTab.end2
View(topTab.end2)
topTab.end2 <- topTab.end2[, -1]
write.csv(topTab.end2, file = file.path(resultsDir,"TopTable_comp2.end.csv"))
topTab.end2
View(topTab.end2)
rownames(topTab.end2) <- topTab.end2[,1]
topTab.end2
View(topTab.end2)
## Comparison 2
anotaGenes.end2 <- merge(anotaGenes, topTab_HFvsHF_RES, by.x=0,by.y=0)
#reordenamos las columnas
topTab.end2 <- anotaGenes.end2
topTab.end2 <- topTab.end2[order(-topTab.end2$B),]
View(topTab.end2)
rownames(topTab.end2) <- topTab.end2$Row.names
View(topTab.end2)
#topTab.end2 <- topTab.end2[, -1]
write.csv(topTab.end2, file = file.path(resultsDir,"TopTable_comp2.end.csv"))
topTab.heatmap2 <- topTab.end2
rownames(topTab.heatmap2) <- topTab.heatmap2[,1]
topTab.heatmap2_subset <- topTab.heatmap2[,c(5:24)]
#PREPARE THE DATA
my_frame <- data.frame(exprs(eset_rma))
head(my_frame)
HMdata_2 <- merge(my_frame, topTab.heatmap2_subset, by.x = 0, by.y = 0)
rownames(HMdata_2) <- HMdata_2$Row.names
HMdata_2 <- HMdata_2[, -c(1, 2:20)]
head(HMdata_2)
HMdata2_2 <- data.matrix(HMdata_2, rownames.force=TRUE)
head(HMdata2_2)
write.csv2(HMdata2_2, file = file.path(resultsDir,"Data2HM_2.csv"))
traceback()
#HEATMAP PLOT
my_palette <- colorRampPalette(c("blue", "red","green"))(n = 299)
#EXPORT TO PDF FILE
pdf(file.path(resultsDir,"HeatMap_CDvsHF_RES.pdf"))
heatmap.2(HMdata2_2,
Rowv=TRUE,
Colv=TRUE,
main="HeatMap_CDvsHF_RES FC>=3",
scale="row",
col=my_palette,
sepcolor="white",
sepwidth=c(0.05,0.05),
cexRow=0.5,
cexCol=0.9,
key=TRUE,
keysize=1.5,
density.info="histogram",
ColSideColors=c("red", "blue", "red", "blue",
"green", "green", "blue", "blue",
"red", "red", "red", "red","blue",
"blue", "red", "green", "green",
"red","red","red"),
tracecol=NULL,
srtCol=30)
HMdata2_2
View(topTab.heatmap1_subset)
View(topTab.heatmap2_subset)
head(exprs(rawData))
rawData
annotation(rawData) <- "clariomsmousetranscriptcluster.db"
eset_filtered <- nsFilter(rawData, var.func=IQR,
var.cutoff=0.75, var.filter=TRUE,
filterByQuantile=TRUE)
## assayData: 29129 features, 20 samples
##   element names: exprs
## protocolData: none
## phenoData
##   sampleNames: GSM3559494 GSM3559495 ... GSM3559513 (20 total)
##   varLabels: sampleName genotype replicate
##   varMetadata: labelDescription
## featureData: none
## experimentData: use 'experimentData(object)'
## Annotation: GPL23038
rawData
## assayData: 29129 features, 20 samples
##   element names: exprs
## protocolData: none
## phenoData
##   sampleNames: GSM3559494 GSM3559495 ... GSM3559513 (20 total)
##   varLabels: sampleName genotype replicate
##   varMetadata: labelDescription
## featureData: none
## experimentData: use 'experimentData(object)'
## Annotation: GPL23038
rawData$eset
## assayData: 29129 features, 20 samples
##   element names: exprs
## protocolData: none
## phenoData
##   sampleNames: GSM3559494 GSM3559495 ... GSM3559513 (20 total)
##   varLabels: sampleName genotype replicate
##   varMetadata: labelDescription
## featureData: none
## experimentData: use 'experimentData(object)'
## Annotation: GPL23038
rawData
eset_rma
## assayData: 29129 features, 20 samples
##   element names: exprs
## protocolData: none
## phenoData
##   sampleNames: GSM3559494 GSM3559495 ... GSM3559513 (20 total)
##   varLabels: sampleName genotype replicate
##   varMetadata: labelDescription
## featureData: none
## experimentData: use 'experimentData(object)'
## Annotation: GPL23038
ExpressionSet(rawData)
knitr::opts_chunk$set(echo = TRUE)
targets <- read.csv("targets.txt", sep = "")
setwd("~/3Term/OmicsTechniques/OmicsTechniquesM2/exercise2")
expressions <- read.delim("expressions.txt", row.names = 1)
targets <- read.csv("targets.txt", sep = "")
targets <- read.csv("targets.txt", sep = "")
gse[[1]]
## assayData: 29129 features, 20 samples
##   element names: exprs
## protocolData: none
## phenoData
##   sampleNames: GSM3559494 GSM3559495 ... GSM3559513 (20 total)
##   varLabels: sampleName genotype replicate
##   varMetadata: labelDescription
## featureData: none
## experimentData: use 'experimentData(object)'
## Annotation: GPL23038
gse <- getGEO("GSE124927")
gse[[1]]
eset <- gse[[1]]
annotation(eset) <- "clariomsmousetranscriptcluster.db"
eset_filtered <- nsFilter(eset, var.func=IQR,
var.cutoff=0.75, var.filter=TRUE,
filterByQuantile=TRUE)
#NUMBER OF GENES OUT
print(eset_filtered$filter.log$numLowVar)
print(eset_filtered$filter.log$numDupsRemoved)
#29129 - eset_filtered$filter.log$numLowVar
#NUMBER OF GENES IN
print(eset_filtered$eset)
#CONTRAST MATRIX.lINEAR MODEL
treat <- targets$shortName
treat
lev <- factor(treat, levels = unique(treat))
lev
design <-model.matrix(~0+lev)
design
colnames(design) <- levels(lev)
rownames(design) <- sampleNames
print(design)
#COMPARISON
cont.matrix1 <- makeContrasts(
CD.vs.HF = CD- HF,
HF.vs.HF_RES = HF-HF_RES,
CD.vs.HF_RES = CD-HF_RES,
levels = design)
cont.matrix1
cont.matrix2 <- makeContrasts(
CD.vs.HF = HF- CD,
HF.vs.HF_RES = HF_RES-HF,
CD.vs.HF_RES = HF_RES-CD,
levels = design)
#MODEL FIT
fit2 <- lmFit(eset_filtered$eset, design)
fit.main1 <- contrasts.fit(fit1, cont.matrix1)
fit.main1 <- eBayes(fit.main1)
#---------------------------------------------------------------------------------------------
###DIFERENTIAL EXPRESSED GENES LISTS.TOPTABLES
#---------------------------------------------------------------------------------------------
comparison1 <- "CDvsHF"
#FILTER BY FALSE DISCOVERY RATE AND FOLD CHANGE
topTab_CDvsHF <- topTable(fit.main1, number=nrow(fit.main1), coef = "CD.vs.HF", adjust="fdr")
head(topTab_CDvsHF)
#29129 - eset_filtered$filter.log$numLowVar
#NUMBER OF GENES IN
print(eset_filtered$eset)
#MODEL FIT
fit1 <- lmFit(eset_filtered$eset, design)
fit.main1 <- contrasts.fit(fit1, cont.matrix1)
require(GEOquery)
gse <- getGEO("GSE124927")
eset <- gse[[1]]
annotation(eset) <- "clariomsmousetranscriptcluster.db"
eset
eset_filtered1 <- nsFilter(eset, var.func=IQR,
var.cutoff=0.75, var.filter=TRUE,
filterByQuantile=TRUE)
#NUMBER OF GENES OUT
print(eset_filtered$filter.log$numLowVar)
#NUMBER OF GENES IN
print(eset_filtered$eset)
#CONTRAST MATRIX.lINEAR MODEL
treat <- targets$shortName
treat
lev <- factor(treat, levels = unique(treat))
lev
design <-model.matrix(~ 0+targets$shortName)
rownames(design)<- targets$sampleName
colnames(design)<-c("CD", "HF", "HF_RES")
print(design)
cont.matrix1 <- makeContrasts(
CD.vs.HF = CD- HF,
HF.vs.HF_RES = HF-HF_RES,
CD.vs.HF_RES = CD-HF_RES,
levels = design)
cont.matrix1
#MODEL FIT
fit1 <- lmFit(eset_filtered1$eset, design)
fit.main1 <- contrasts.fit(fit1, cont.matrix1)
fit.main1 <- eBayes(fit.main1)
#FILTER BY FALSE DISCOVERY RATE AND FOLD CHANGE
topTab_CDvsHF <- topTable(fit.main1, number=nrow(fit.main1), coef = "CD.vs.HF", adjust="fdr", lfc = 1)
head(topTab_CDvsHF)
#FILTER BY FALSE DISCOVERY RATE AND FOLD CHANGE
topTab_CDvsHF <- topTable(fit.main1, number=nrow(fit.main1), coef = "CD.vs.HF", adjust="fdr", lfc = 3)
head(topTab_CDvsHF)
#FILTER BY FALSE DISCOVERY RATE AND FOLD CHANGE
topTab_CDvsHF <- topTable(fit.main1, number=nrow(fit.main1), coef = "CD.vs.HF", adjust="fdr", lfc = 2)
head(topTab_CDvsHF)
View(topTab_CDvsHF)
### Multiple Comparisons
fit.main1$p.value
res <- decideTests(fit.main1, method = "separate", adjust.method = "fdr", p.value = 0.7)
sum.res.rows <- apply(abs(res), 1, sum)
sum.res.rows
res.selected <- res[sum.res.rows!=0,]
res.selected
print(summary(res))
setwd("~/3Term/OmicsTechniques/Montalban_Aina-OmicsTechniques/Exercise3")
targets <- read.csv(file = (file.path(dataDir,"targets.txt")),header = TRUE, sep = "")
targets
targets <- read.csv(file = (file.path(dataDir,"targets.txt")),header = TRUE, sep = "")
targets
### CEL files
```{r Data Capture CEL, eval=FALSE}
CELfiles <- list.celfiles(file.path(dataDir))
CELfiles
rawData <- read.celfiles(file.path(dataDir,CELfiles))
```
CELfiles <- list.celfiles(file.path(dataDir))
CELfiles
rawData <- read.celfiles(file.path(dataDir,CELfiles))
# Select sample names and colors
sampleNames <- as.character(targets$shortName)
sampleColor <- as.character(targets$Colors)
#BOXPLOT
boxplot(rawData, which="all",las=2, main="Intensity distribution of RAW data",
cex.axis=0.6, col=sampleColor, names=sampleNames)
clust.euclid.average <- hclust(dist(t(exprs(rawData))),method="average")
plot(clust.euclid.average, labels=sampleNames, main="Hierarchical clustering of RawData",
cex=0.7,  hang=-1)
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE, formapunts=NULL, myCex=0.8,...)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors, pch=formapunts,
xlim=c(min(pcX$x[,1])-100000, max(pcX$x[,1])+100000),ylim=c(min(pcX$x[,2])-100000, max(pcX$x[,2])+100000))
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=myCex)
title(paste("Plot of first 2 PCs for expressions in", dataDesc, sep=" "), cex=0.8)
}
plotPCA(exprs(rawData), labels=sampleNames, dataDesc="raw data", colors=sampleColor,
formapunts=c(rep(16,4),rep(17,4)), myCex=0.6)
eset_rma<-rma(rawData)
write.exprs(eset_rma, file.path(resultsDir, "NormData.txt"))
#BOXPLOT
boxplot(eset_rma, las=2, main="Intensity distribution of Normalized data", cex.axis=0.6,
col=sampleColor, names=sampleNames)
#HIERARQUICAL CLUSTERING
clust.euclid.average <- hclust(dist(t(exprs(eset_rma))),method="average")
#HIERARQUICAL CLUSTERING
clust.euclid.average <- hclust(dist(t(exprs(eset_rma))),method="average")
plot(clust.euclid.average, labels=sampleNames, main="Hierarchical clustering of NormData",
cex=0.7,  hang=-1)
#HIERARQUICAL CLUSTERING
clust.euclid.average <- hclust(dist(t(exprs(eset_rma))),method="average")
plot(clust.euclid.average, labels=sampleNames, main="Hierarchical clustering of NormData",
cex=0.7,  hang=-1)
```{r}
#PRINCIPAL COMPONENT ANALYSIS
plotPCA <- function ( X, labels=NULL, colors=NULL, dataDesc="", scale=FALSE, formapunts=NULL, myCex=0.8,...)
{
pcX<-prcomp(t(X), scale=scale) # o prcomp(t(X))
loads<- round(pcX$sdev^2/sum(pcX$sdev^2)*100,1)
xlab<-c(paste("PC1",loads[1],"%"))
ylab<-c(paste("PC2",loads[2],"%"))
if (is.null(colors)) colors=1
plot(pcX$x[,1:2],xlab=xlab,ylab=ylab, col=colors, pch=formapunts,
xlim=c(min(pcX$x[,1])-10, max(pcX$x[,1])+10),ylim=c(min(pcX$x[,2])-10, max(pcX$x[,2])+10))
text(pcX$x[,1],pcX$x[,2], labels, pos=3, cex=myCex)
title(paste("Plot of first 2 PCs for expressions in", dataDesc, sep=" "), cex=0.8)
}
plotPCA(exprs(eset_rma), labels=sampleNames, dataDesc="NormData", colors=sampleColor,
formapunts=c(rep(16,4),rep(17,4)), myCex=0.6)
sds <- apply (exprs(eset_rma), 1, sd)
sdsO<- sort(sds)
plot(1:length(sdsO), sdsO, main="Distribution of variability for all genes",sub="Vertical lines represent 90% and 95% percentiles",
xlab="Gene index (from least to most variable)",
ylab="Standard deviation")
annotation(eset_rma) <- "clariomsmousetranscriptcluster.db"
eset_filtered <- nsFilter(eset_rma, var.func=IQR,
var.cutoff=0.75, var.filter=TRUE,
filterByQuantile=TRUE)
#NUMBER OF GENES OUT
print(eset_filtered$filter.log$numLowVar)
#NUMBER OF GENES IN
print(eset_filtered$eset)
rawData
sampleNames
sampleColor
#BOXPLOT
boxplot(rawData, which="all",las=2, main="Intensity distribution of RAW data",
cex.axis=0.6, col=sampleColor, names=sampleNames)
clust.euclid.average <- hclust(dist(t(exprs(rawData))),method="average")
plot(clust.euclid.average, labels=sampleNames, main="Hierarchical clustering of RawData",
cex=0.7,  hang=-1)
setwd("~/3Term/OmicsTechniques/Montalban_Aina-OmicsTechniques/Exercise3")
CELfiles <- list.celfiles(file.path(dataDir))
CELfiles <- list.celfiles(file.path(dataDir))
CELfiles
rawData <- read.celfiles(file.path(dataDir,CELfiles))
